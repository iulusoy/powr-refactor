name: compile and run colitest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compile-and-run-colitest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        # os: [ubuntu-latest]
        os: [ubuntu-latest]
        toolchain:
          # - {compiler: intel, version: '2024.0'}
          - {compiler: intel-classic, version: '2023.2'}
          - {compiler: intel, version: '2023.1'}
          - {compiler: intel, version: '2023.0'}
          - {compiler: intel, version: '2022.2'}
          - {compiler: intel, version: '2022.2.1'}
          - {compiler: intel, version: '2022.1'}
          - {compiler: intel, version: '2022.0'}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          src
          build
          powr
          test
    - name: get fortran compiler
      uses: ssciwr/setup-fortran@v0.1
      id: setup-fortran
      with:
        compiler: ${{ matrix.toolchain.compiler }}
        version: ${{ matrix.toolchain.version }}
        install_mkl: "true"
    - name: get compiler version
      run: ${{ env.FC }} --version
      env:
        FC: ${{ steps.setup-fortran.outputs.fc }}
    - name: compile powr
      run: |
        make 
        make clean_build
        make debug
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: set up the job and run base tests
      run: |
        echo "MKLROOT $MKLROOT"
        echo "MKLLIB $MKLLIB"
        echo "DYLDLIB $DYLD_LIBRARY_PATH"
        if [ -z "$DYLD_LIBRARY_PATH" ]; then
          echo "DYLD_LIBRARY_PATH not set - setting it now.."
          export DYLD_LIBRARY_PATH=$MKLLIB:$DYLD_LIBRARY_PATH
        fi
        python -m pytest -svv test/test_colitest.py --cov=. --cov-report=xml
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
