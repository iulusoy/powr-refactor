#!/bin/bash
source ~/.powrconfig

#--------- begin of settings ----------------------------------------------
vnice=19
kn=$1

# - local machine must be listed in $POWR_WORK/wrjobs/list-of-machines
# - Allocation of scratchspace must be listed in $POWR_WORK/wrjobs/tmphosts 

HOSTNAME=$(hostname | cut -d '.' -f 1)

# path to where the output file (FORMAL_CARDS) is written
path=$POWR_WORK/wrdata$kn

# directory where the job is executed
# path of the scratch directory
path1=$POWR_WORK/scratch/newformal_cards$kn

# path to exe-files
# and path where the non-optimized version has been linked (for debugger!)
if [[ $HOSTTYPE == *x86_64* ]] ; then
    exepath=${POWREXEPATH:-$POWR_WORK/exe.dir}
    if [ _$POWR_INSTTYPE == _local ] ; then
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${POWR_WORK}/intellibs
    elif [ _$POWR_INSTTYPE == _potsdam ] ; then
        source $exepath/LDpath.bash
    fi
    DBXPATH=${DBXPATH:-~htodt/lib_intel101_em64t_wrh}
    DBX=${DBX:-"/opt/intel/Compiler/11.1/038/bin/intel64/idbc -exec"}
else
    echo "Could not determine valid HOSTTYPE: $HOSTTYPE"
    exit
fi

# tool for submitting the wruniq-job
submit=${submit:-$POWR_WORK/proc.dir/submit.com}

# macOS: nice from /usr/bin/ is broken (dylibs paths not found for wrstart etc.)
if [[ $OSTYPE == *darwin* ]] ; then
    nice=$exepath/gnice
else # Linux
    nice=nice
fi

#-------------- end of settings -----------------------------------------
wait=false
vstop=false
dbx=false

if [ $# -eq 2 ] ; then
  if [ $2 == 'dbx' ] ; then
    dbx=true
  else
    echo "Abort: unknown option= $2" >> $POWR_WORK/output/newformal_cards$kn.cpr
    exit
  fi
fi

#rm -f  $POWR_WORK/output/newformal_cards$kn.log
#rm -f  $POWR_WORK/output/newformal_cards$kn.cpr

echo 'NEWFORMAL_CARDS started ' $(date)  >> $POWR_WORK/output/newformal_cards$kn.cpr
echo 'NEWFORMAL_CARDS started ' $(date)  >  $POWR_WORK/output/newformal_cards$kn.log

mkdir -p $path1
cd $path1 || exit

# fetch input file
cp $POWR_WORK/wrdata$kn/NEWFORMAL_CARDS_INPUT .
cp $POWR_WORK/wrdata$kn/DATOM .

# replace ~ with absolut path, = and : and , are ignored
rm -rf NEWFORMAL_CARDS_INPUT.tmp

while read line ; do 
 archivepath=$(echo $line | grep "^STANDARDPATH" | tr = ' ' | tr : ' ' | tr , ' ' | awk '{print $2}')
 testpath=$(echo $line | grep "^TESTPATH" | tr = ' ' | tr : ' ' | tr , ' ' | awk '{print $2}')
 echo $archivepath
 echo $testpath
 if [ _$archivepath == "_" -a _$testpath == "_" ] ; then
  printf "$line \n" >> NEWFORMAL_CARDS_INPUT.tmp
 else
  if [ _$archivepath != "_" ]  ; then
   homedir1=$(echo $archivepath | cut -d / -f1)
   homedir2=$(eval echo $homedir1)
   homedir1b=$(echo $archivepath | cut -d / -f2-)
   echo "STANDARDPATH = $homedir2/$homedir1b" >> NEWFORMAL_CARDS_INPUT.tmp
  elif [ _$testpath != "_" ]  ; then
   homedir1=$(echo $testpath | cut -d / -f1)
   homedir2=$(eval echo $homedir1)
   homedir1b=$(echo $testpath | cut -d / -f2-)
   echo "TESTPATH = $homedir2/$homedir1b" >> NEWFORMAL_CARDS_INPUT.tmp
  fi  
 fi
done < NEWFORMAL_CARDS_INPUT
cat NEWFORMAL_CARDS_INPUT.tmp | sed s,"\$POWR_WORK",$POWR_WORK,g > NEWFORMAL_CARDS_INPUT
# mv NEWFORMAL_CARDS_INPUT.tmp NEWFORMAL_CARDS_INPUT

# ------- EXECUTION OF PROGRAM ----------------------------
# SET ERROR STOP CODE
echo 1 >G0

if [ $dbx == 'true' ] ; then
  eval "$DBX -I  $DBXPATH/routines/ $DBXPATH/newformal_cards.exe"
else
  $nice -$vnice  $exepath/newformal_cards.exe.opt 
fi

# Error exit
if [ ERROR_$(cat G0) == ERROR_1 ] ; then
  echo ERROR STOP $(date) >> $POWR_WORK/output/newformal_cards$kn.cpr
  echo ERROR STOP $(date) >> $POWR_WORK/output/newformal_cards$kn.log
  rm fort.*
  exit
fi

# ------- Save created FORMAL_CARDS into wrdata directory ----------
cp FORMAL_CARDS $POWR_WORK/wrdata$kn

# ------- END OF JOB -------------------------
rm fort.*
echo "NEWFORMAL_CARDS finished " $(date) >> $POWR_WORK/output/newformal_cards$kn.cpr
echo "NEWFORMAL_CARDS finished " $(date) >> $POWR_WORK/output/newformal_cards$kn.log
echo
